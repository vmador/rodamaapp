# .github/workflows/pake-build.yml
name: Build Pake App

on:
  repository_dispatch:
    types: [build-pake-app]

env:
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install Dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libayatana-appindicator3-dev librsvg2-dev

      - name: Setup Tauri
        run: |
          npm create tauri-app@latest pake-app -- --yes
          cd pake-app
          
          # Configurar la aplicación
          cat > src-tauri/tauri.conf.json << EOF
          {
            "build": {
              "beforeBuildCommand": "",
              "beforeDevCommand": "",
              "devPath": "../src",
              "distDir": "../src"
            },
            "package": {
              "productName": "${{ github.event.client_payload.name }}",
              "version": "1.0.0"
            },
            "tauri": {
              "allowlist": {
                "all": true
              },
              "bundle": {
                "active": true,
                "category": "DeveloperTool",
                "copyright": "",
                "deb": {
                  "depends": []
                },
                "externalBin": [],
                "icon": [
                  "icons/32x32.png",
                  "icons/128x128.png",
                  "icons/128x128@2x.png",
                  "icons/icon.icns",
                  "icons/icon.ico"
                ],
                "identifier": "com.rodama.app",
                "longDescription": "",
                "macOS": {
                  "entitlements": null,
                  "exceptionDomain": "",
                  "frameworks": [],
                  "providerShortName": null,
                  "signingIdentity": null
                },
                "resources": [],
                "shortDescription": "",
                "targets": "all",
                "windows": {
                  "certificateThumbprint": null,
                  "digestAlgorithm": "sha256",
                  "timestampUrl": ""
                }
              },
              "security": {
                "csp": null
              },
              "updater": {
                "active": false
              },
              "windows": [
                {
                  "fullscreen": false,
                  "height": 800,
                  "resizable": true,
                  "title": "${{ github.event.client_payload.name }}",
                  "width": 1280,
                  "url": "${{ github.event.client_payload.url }}"
                }
              ]
            }
          }
          EOF
          
          # Crear directorio src y agregar index.html
          mkdir -p src
          cat > src/index.html << EOF
          <!DOCTYPE html>
          <html>
            <head>
              <title>${{ github.event.client_payload.name }}</title>
              <meta http-equiv="refresh" content="0;url=${{ github.event.client_payload.url }}">
            </head>
            <body>
              <p>Redirecting to ${{ github.event.client_payload.url }}...</p>
            </body>
          </html>
          EOF
          
          # Construir la aplicación
          npm install
          npm run tauri build

      - name: Package Apps
        run: |
          cd pake-app
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            Compress-Archive -Path "src-tauri/target/release/*.exe" -DestinationPath "../${{ github.event.client_payload.name }}-windows.zip"
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            cd src-tauri/target/release/bundle/macos
            zip -r "../../../../../${{ github.event.client_payload.name }}-macos.zip" *.app
          else
            cd src-tauri/target/release/bundle/appimage
            zip -r "../../../../../${{ github.event.client_payload.name }}-linux.zip" *.AppImage
          fi
        shell: bash

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event.client_payload.name }}-${{ matrix.os }}
          path: ${{ github.event.client_payload.name }}-*.zip

      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: success()
        with:
          files: ${{ github.event.client_payload.name }}-*.zip
          name: ${{ github.event.client_payload.name }}
          tag_name: release-${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Supabase Status
        run: |
          curl -X PATCH "${{ env.SUPABASE_URL }}/rest/v1/pake_apps" \
          -H "apikey: ${{ env.SUPABASE_ANON_KEY }}" \
          -H "Content-Type: application/json" \
