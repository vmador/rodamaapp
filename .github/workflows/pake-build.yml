# .github/workflows/pake-build.yml
name: Build Pake App

on:
  repository_dispatch:
    types: [build-pake-app]

env:
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install Dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libayatana-appindicator3-dev librsvg2-dev

      - name: Install Pake CLI
        run: cargo install pake-cli@2.6.1

      - name: Build with Pake
        run: |
          pake ${{ github.event.client_payload.url }} \
          --name "${{ github.event.client_payload.name }}" \
          --height 800 \
          --width 1280

      - name: Package Apps
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            Compress-Archive -Path "*.exe" -DestinationPath "${{ github.event.client_payload.name }}-windows.zip"
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            zip -r "${{ github.event.client_payload.name }}-macos.zip" *.app
          else
            zip -r "${{ github.event.client_payload.name }}-linux.zip" *.AppImage
          fi
        shell: bash

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event.client_payload.name }}-${{ matrix.os }}
          path: ${{ github.event.client_payload.name }}-*.zip

      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: success()
        with:
          files: ${{ github.event.client_payload.name }}-*.zip
          name: ${{ github.event.client_payload.name }}
          tag_name: release-${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Supabase Status
        if: always()
        run: |
          curl -X PATCH ${{ env.SUPABASE_URL }}/rest/v1/pake_apps \
          -H "apikey: ${{ env.SUPABASE_ANON_KEY }}" \
          -H "Content-Type: application/json" \
          -H "Prefer: return=minimal" \
          -d "{
            \"status\": \"${{ job.status == 'success' && 'completed' || 'failed' }}\",
            \"download_url\": \"${{ github.server_url }}/${{ github.repository }}/releases/tag/release-${{ github.sha }}\"
          }" \
<<<<<<< HEAD
          -d "id=eq.${{ github.event.client_payload.build_id }}"
=======
          -d "id=eq.${{ github.event.client_payload.build_id }}"
>>>>>>> a1b7e3c72bc556efc7a2fa98e9f32936d5a7f7ee
