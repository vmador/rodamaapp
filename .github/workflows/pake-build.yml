# .github/workflows/pake-build.yml
name: Build Pake App

on:
  repository_dispatch:
    types: [build-pake-app]

env:
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Install Dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libayatana-appindicator3-dev librsvg2-dev

      - name: Build Pake App
        run: |
          # Clone specific version
          git clone --depth 1 --branch V0.9.5 https://github.com/tw93/Pake.git
          cd Pake
          
          # Install dependencies
          npm install
          
          # Prepare Tauri build
          cd src-tauri
          
          # Update dependencies versions in Cargo.toml
          perl -i -pe 's/(tauri.*=.*)"[^"]+"/\1"1.2.4"/g' Cargo.toml
          perl -i -pe 's/(tauri-build.*=.*)"[^"]+"/\1"1.2.1"/g' Cargo.toml
          
          # Build the application
          cargo build --release

      - name: Package Apps
        run: |
          cd Pake/src-tauri/target/release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            Compress-Archive -Path "app.exe" -DestinationPath "../../../${{ github.event.client_payload.name }}-windows.zip"
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            cd bundle/macos
            zip -r "../../../../${{ github.event.client_payload.name }}-macos.zip" *.app
          else
            cd bundle/appimage
            zip -r "../../../../${{ github.event.client_payload.name }}-linux.zip" *.AppImage
          fi
        shell: bash

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event.client_payload.name }}-${{ matrix.os }}
          path: Pake/${{ github.event.client_payload.name }}-*.zip

      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: success()
        with:
          files: Pake/${{ github.event.client_payload.name }}-*.zip
          name: ${{ github.event.client_payload.name }}
          tag_name: release-${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Supabase Status
        run: |
          curl -X PATCH "${{ env.SUPABASE_URL }}/rest/v1/pake_apps" \
          -H "apikey: ${{ env.SUPABASE_ANON_KEY }}" \
          -H "Content-Type: application/json" \
