# .github/workflows/pake-build.yml
name: Build Pake App

on:
  repository_dispatch:
    types: [build-pake-app]

env:
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Install Dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libayatana-appindicator3-dev librsvg2-dev

      - name: Install Pake
        run: |
          # Clone and build from source
          git clone https://github.com/tw93/Pake.git
          cd Pake
          # Install dependencies
          npm install
          cd src-tauri
          
          # Remove oauth from Cargo.toml
          perl -ne 'print unless /tauri-plugin-oauth/' Cargo.toml > Cargo.toml.new
          mv Cargo.toml.new Cargo.toml
          
          # Remove oauth from main.rs
          perl -i -ne 'print unless /tauri_plugin_oauth::init()/' src/main.rs
          
          # Show modified files
          echo "Modified main.rs:"
          cat src/main.rs
          
          # Build
          cargo build --release
          
          # Move binary to path
          mkdir -p ~/.cargo/bin
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp target/release/app.exe ~/.cargo/bin/pake.exe
          else
            cp target/release/app ~/.cargo/bin/pake
          fi
          chmod +x ~/.cargo/bin/pake || true
        shell: bash

      - name: Build with Pake
        run: |
          export PATH="$HOME/.cargo/bin:$PATH"
          pake ${{ github.event.client_payload.url }} \
          --name "${{ github.event.client_payload.name }}" \
          --height 800 \
          --width 1280
        shell: bash

      - name: Package Apps
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            Compress-Archive -Path "*.exe" -DestinationPath "${{ github.event.client_payload.name }}-windows.zip"
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            zip -r "${{ github.event.client_payload.name }}-macos.zip" *.app
          else
            zip -r "${{ github.event.client_payload.name }}-linux.zip" *.AppImage
          fi
        shell: bash

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event.client_payload.name }}-${{ matrix.os }}
          path: ${{ github.event.client_payload.name }}-*.zip

      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: success()
        with:
          files: ${{ github.event.client_payload.name }}-*.zip
          name: ${{ github.event.client_payload.name }}
          tag_name: release-${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Supabase Status
        run: |
          curl -X PATCH "${{ env.SUPABASE_URL }}/rest/v1/pake_apps" \
          -H "apikey: ${{ env.SUPABASE_ANON_KEY }}" \
          -H "Content-Type: application/json" \
